"""
Django settings for my_blog project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# 添加 apps 目录
# 创建应用之后，把apps目录加入到sys.path中, 目的是让我们可以直接使用app名访问app
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'c1hw*nduq)#yk-)ylvm2z3ndg_5nhu2!qxpz@t5+r62gs=gdmy'

# SECURITY WARNING: don't run with debug turned on in production!
# 部署到线上时为 False 在本地调试时请修改为 True
# 打开DEBUG就会泄露一些目录或代码等关键信息,这是非常危险的因此要确保在生产环境中是关闭状态
DEBUG = True

ALLOWED_HOSTS = ['*']  # 填写指定的ip地址,*标识可以匹配所有的ip地址,二级域名在后面追加

# Application definition

INSTALLED_APPS = [
    # django自带的app
    "simpleui",  # 添加内容，一定要加在admin前
    'django.contrib.admin',
    'django.contrib.auth',  # django自带的认证系统
    'django.contrib.contenttypes',  # 记录所有数据库模型中创建的元数据信息
    'django.contrib.sessions',  # 会话session数据可以在数据库中的django_session表中查看。
    'django.contrib.messages',  # 消息框架
    'django.contrib.staticfiles',  # 通过该应用找设定好的静态文件
    # 'django.contrib.sites',

    'password_reset',  # 新增重置密码
    # 以下是自定义的app,分别对应一些页面或功能
    'article',  # 添加文章模块
    'user',  # 添加用户模块

    'mdeditor',  # 富文本编辑器

    # 'allauth',
    # 'allauth.account',
    # 'allauth.socialaccount',
    #
    # # 可添加需要的第三方登录
    # 'allauth.socialaccount.providers.github',

    'haystack',  # 注册全文检索框架 将haystack放在最后
    'rest_framework', # api

]

"""
django在处理请求的时候,首先会通过django中间件进行一系列的处理，然后再通过默认的URL方式进行的. 中间件中设定的是从用户请求到用户请求结束期间所需要做的操作.
中间件的处理按照一定的顺序,即用户的请求会次从上到下依次执行MIDDLEWARE中的配置，然后服务器响应用户的时候会再次从下至上依次执行.
"""
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # 安全认证,判断请求方法是否被认可
    'django.contrib.sessions.middleware.SessionMiddleware',  # 判断用户端的session ID是否有效
    'django.middleware.common.CommonMiddleware',  # 会自动填充头部的https://或尾部的/
    'django.middleware.csrf.CsrfViewMiddleware',  # 跨站请求伪造
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # 权限校验认证
    'django.contrib.messages.middleware.MessageMiddleware',  # 处理临时消息的中间件
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # 安全防护
]

ROOT_URLCONF = 'my_blog.urls'  # 路由指向的路径

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 定义模板位置
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # # allauth 启动必须项
                # 'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'my_blog.wsgi.application'  # 指定wsgi服务器,是django runserver中自带的一个服务器
# 是框架与应用沟通的桥梁

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        # 修改为mysql数据库
        'ENGINE': 'django.db.backends.mysql',
        # 为了安全起见,可以将数据库的配置信息单独拿到一个环境变量文件中
        # 'read_default_file': 'db/mysql.cnf',  # 读取数据库的配置信息
        'NAME': 'my_blog',  # 数据库名
        'PORT': 3306,  # 端口号
        'USER': 'root',  # 用户名
        'PASSWORD': 'mysql',  # 密码
        'HOST': 'localhost',  # 默认127.0.0.1
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# django认证系统使用的模型类  注明User模型的导入路径
AUTH_USER_MODEL = 'user.User'  # python manage.py createsuperuser

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'  # 优先显示的语言

TIME_ZONE = 'Asia/Shanghai'  # 显示的时区

USE_I18N = True  # 是否应该启用Django的翻译系统, 也可以为了提高使用性能,将其关闭

USE_L10N = True  # 是否启用本地化

USE_TZ = True  # 是否支持时区

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

# 静态文件地址
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
# 静态文件收集目录
# STATIC_ROOT = os.path.join(BASE_DIR, 'collected_static')

# 媒体文件收集
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# 发送邮件配置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# smpt服务地址
EMAIL_HOST = 'smtp.qq.com'
EMAIL_PORT = 25
# 发送邮件的邮箱
EMAIL_HOST_USER = '1105067343@qq.com'
EMAIL_USE_TLS = True  # 这里必须是 True，否则发送不成功
# 在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = 'irerjexhozdphdcc'
# 收件人看到的发件人
DEFAULT_FROM_EMAIL = '重置密码 <1105067343@qq.com>'

# Django的缓存配置 redis
""" 配置redis数据库
为了给用户的session信息,短信和图片验证码提供一个缓存的空间,我们需要提供一个缓存类数据库用来缓存我们的验证数据
这么做同样也是给mysql数据库减轻负重
这里我们使用redis数据库来完成缓存验证信息的目标
"""
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",  # redis缓存引擎
        "LOCATION": "redis://127.0.0.1:6379/0",  # 指定redis所在的地址, 默认端口6379, 0代表数据库的索引
        "OPTIONS": {  # 指定需要使用redis的client类
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# 配置session存储
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

# 配置登录url地址
LOGIN_URL = '/user/login'  # /accounts/login?next=/user

# 全文检索框架的配置
# HAYSTACK_CONNECTIONS = {
#     'default': {
#         # 使用whoosh引擎
#         # 'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
#         'ENGINE': 'haystack.backends.whoosh_cn_backend.WhooshEngine',
#         # 索引文件路径
#         'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
#     }
# }

# 全文搜索引擎haystack 配置
# 不同的搜索引擎，配置不同，详情见官方文档
# HAYSTACK_CONNECTIONS = {
#     'default': {
#         # 使用 elasticsearch 引擎
#         'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
#         'URL': 'http://127.0.0.1:9200/',  # 此处为elasticsearch运行的服务器ip地址和端口
#         'INDEX_NAME': 'tzpython',  # 指定elasticserach建立的索引库名称
#     },
# }
# # 当添加、修改、删除数据时，自动生成索引 实时更新index
# HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
#
# # 指定搜索结果每页显示的条数 搜索结果每页显示数量
# HAYSTACK_SEARCH_RESULTS_PER_PAGE = 5


# 配置日志器
LOGGING = {  # 表示放在logging的参数里面已字典的形式存在
    'version': 1,  # 版本号固定, 表示django在解读配置信息时里面的键值对参数名有特定的含义,默认自己实现,版本号为1.
    'disable_existing_loggers': False,  # 表示是不是要禁止已经存在的日志器, 在其他地方也有配置日志器.
    'formatters': {  # 表示日志输出的格式
        'verbose': {  # 表示复杂点的格式
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },  # levelname日志等级,asctime记录时间,module记录的模块,lineno行号,message具体日志信息
        'simple': {  # 表示简单格式
            #  表示他的等级在模块的第几行出现的信息
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {  # 过滤器, 表示是否屏蔽在其他地方输出的日志信息. django默认不做任何屏蔽
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',  # 过滤器,保留debug及以上的日志
        },
    },
    'handlers': {  # 代表处理器
        'console': {  # 终端,对终端中日志显示的设置
            'level': 'DEBUG',  # debug级别以上的都可以写
            'filters': ['require_debug_true'],  # 过滤器,保留debug及以上的日志
            'class': 'logging.StreamHandler',  # 流处理器
            'formatter': 'simple'  # 使用简单格式,上面formatters定义的
        },
        'file': {  # 文件,对文件中日志显示的设置
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            # BASE_DIR 指的是里面内嵌的test_pr 目录
            'filename': os.path.join(BASE_DIR, "logs/debug.log"),  # 日志文件的位置
            'maxBytes': 300 * 1024 * 1024,  # 每个文件的最大字节数,满了自动产生新文件
            'backupCount': 10,  # 保留多少个文件
            'formatter': 'verbose'  # 当保存的文件达到最大时,之后的文件会自动对之前的进行覆盖
        },
    },
    # 本次项目中所使用的日志器在这配置
    'loggers': {  # 创建logger日志器的对象,是通过配置方式创建,不是真定义
        'django': {  # 定义了一个名为django的日志器
            'handlers': ['console', 'file'],  # 可以往终端和文件里面写
            'propagate': True,  # 表示django日志器执行完后还可以再传递,别的日志器也可以再使用
            'level': 'INFO',  # info级的日志会被记录
        },
    }
}

# 管理登录页面的logo
# SIMPLEUI_LOGO = 'https://avatars2.githubusercontent.com/u/13655483?s=60&v=4'

# SIMPLEUI_ICON = {
#     '主页促销活动': 'far fa-grin-hearts',
#     '主页分类展示商品': 'far fa-grin-wink',
#     '商品': 'far fa-grin-tongue-squint',
#     '商品SPU': 'far fa-grin-stars',
#     '商品种类': 'far fa-grin',
# }

MDEDITOR_CONFIGS = {
    'default': {
        'width': '90%',  # 自定义编辑框宽度
        'heigth': 500,  # 自定义编辑框高度
        'toolbar': ["undo", "redo", "|",
                    "bold", "del", "italic", "quote", "ucwords", "uppercase", "lowercase", "|",
                    "h1", "h2", "h3", "h5", "h6", "|",
                    "list-ul", "list-ol", "hr", "|",
                    "link", "reference-link", "image", "code", "preformatted-text", "code-block", "table", "datetime",
                    "emoji", "html-entities", "pagebreak", "goto-line", "|",
                    "help", "info",
                    "||", "preview", "watch", "fullscreen"],  # 自定义编辑框工具栏
        'upload_image_formats': ["jpg", "jpeg", "gif", "png", "bmp", "webp"],  # 图片上传格式类型
        'image_floder': 'editor',  # 图片保存文件夹名称
        'theme': 'default',  # 编辑框主题 ，dark / default
        'preview_theme': 'default',  # 预览区域主题， dark / default
        'editor_theme': 'default',  # edit区域主题，pastel-on-dark / default
        'toolbar_autofixed': True,  # 工具栏是否吸顶
        'search_replace': True,  # 是否开启查找替换
        'emoji': True,  # 是否开启表情功能
        'tex': True,  # 是否开启 tex 图表功能
        'flow_chart': True,  # 是否开启流程图功能
        'sequence': True  # 是否开启序列图功能
    }

}

# AUTHENTICATION_BACKENDS = (
#     # Django 后台可独立于 allauth 登录
#     'django.contrib.auth.backends.ModelBackend',
#
#     # 配置 allauth 独有的认证方法，如 email 登录
#     'allauth.account.auth_backends.AuthenticationBackend',
# )
#
# # 当其为mandatory时，本地注册的用户必须先验证邮箱才可以登录。optional和none都不要求验证邮箱，区别是optional仍然会发送验证邮件，而none连认证邮件都不会发送。
# ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
#
# # ：同理，但是作用于第三方账号的注册。
# # SOCIALACCOUNT_EMAIL_VERIFICATION = 'optional' / 'mandatory' / 'none'
#
# # 指定登录方法，即通过用户名、邮箱进行登录，或者两者均可。/ 'user' / 'email'：
# ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
#
# # ：注册本地用户时，是否必须填写邮箱。 / False
# ACCOUNT_EMAIL_REQUIRED = True
#
# # 设置站点
# SITE_ID = 1
#
# # 登录成功后重定向地址
# LOGIN_REDIRECT_URL = '/article'

# 全文搜索引擎haystack 配置
# 不同的搜索引擎，配置不同，详情见官方文档
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
        'URL': 'http://127.0.0.1:9200/',  # 此处为elasticsearch运行的服务器ip地址和端口
        'INDEX_NAME': 'wjpython',  # 指定elasticserach建立的索引库名称
    },
}

# 搜索结果每页显示数量
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 4
# 实时更新index
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
# 防止标题被截断
HAYSTACK_CUSTOM_HIGHLIGHTER = 'article.utils.Highlighter'
